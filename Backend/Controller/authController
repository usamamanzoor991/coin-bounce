const Joi = require("joi");
const User = require('../Models/User')
const bcrypt = require('bcryptjs');
const UserDTO = require('../dto/user');
const JWTServices = require('../sevices/JWTServices');
const RefreshToken = require('../Models/token');

const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,25}$/;

const authController= {
    async register(req,res,next) {
        //1. Validate User Input
        const userRegisterSchema = Joi.object({
            username: Joi.string().min(5).max(30).required(),
            name: Joi.string().max(30).required(),
            email: Joi.string().email().required(),
            password: Joi.string().pattern(passwordPattern).required(),
            confirmPassword: Joi.ref('password')
        });

        const {error} = userRegisterSchema.validate(req.body);
        //2. If Error In Validation => return eroor via middleware
        if (error){
            return next(error);
        }
        //3. if email or username is already registered => return an error
        const {username,email,password,name} = req.body;

        try{

            const emailInUse = await User.exists({email});
            const userNameInUse = await User.exists({username});
            if (emailInUse){
                const error = {
                    status : 409,
                    message : 'Email Already Registered , Use Another Email!'
                }
                return next(error);
            }

            if (userNameInUse){
                const error = {
                    status :  409,
                    message : 'Username Already Taken , Use Another Username'
                }
                return next(error);
            }
        
        }catch(error){
            return next(error);
        }
        //4. password hash
        const hashedPassword = await bcrypt.hash(password, 10);
        //5. store data in db
        let accessToken;
        let refreshToken;
        let user;

        try{
            const userToRegister = new User({
                username,
                email,
                name,
                password : hashedPassword
            });

            user = await userToRegister.save();
            //token generation
            accessToken = JWTServices.signAccessToken({_id : user._id} , '30m');
            refreshToken = JWTServices.signRefreshToken({_id : user._id} , '60m');
        }catch(error){
            return next(error);
        }

        //Store refresh token in DB
        await JWTServices.storeRefreshToken(refreshToken , user._id);
        //send cookies
        res.cookie('accessToken' , accessToken,{
            maxAge : 1000 * 60 * 60 * 24 ,
            httpOnly : true
        });

        res.cookie('refreshToken' , refreshToken,{
            maxAge : 1000 * 60 * 60 * 24 ,
            httpOnly : true
        });

        //6. response send
        const Userdto = new UserDTO(user);
        return res.status(201).json({user : Userdto ,auth : true});
    },
    async login(req,res,next) {
        const userLoginSchema = Joi.object({
            username: Joi.string().min(5).max(30).required(),
            password: Joi.string().pattern(passwordPattern).required(),
        });

        const {error} = userLoginSchema.validate(req.body);

        if (error){
            return next(error);
        }

        const {username,password} = req.body;
        let user;
        try{
            //Match username
            user = await User.findOne({username});

            if (!user){
                const error = {
                    status : 401,
                    message : 'Invalid Username!'
                }

                return next(error);

            }

            //Match Password
            const match = await bcrypt.compare(password,user.password);

            if (!match){
                const error = {
                    status : 401,
                    message : 'Invalid Password!'
                }

                return next(error);

            }
        }catch(error){
            return next(error);
        }
        const accessToken = JWTServices.signAccessToken({_id : user._id} , '30m');
        const refreshToken = JWTServices.signRefreshToken({_id : user._id} , '60m');

        //update refresh token in db
        try{
            await RefreshToken.updateOne ({
                _id : user._id
            },
            {token : refreshToken},
            {update : true}
            )
        }catch(error){
            return next(error);
        }
        

        res.cookie('accessToken' , accessToken,{
            maxAge : 1000 * 60 * 60 * 24 ,
            httpOnly : true
        });

        res.cookie('refreshToken' , refreshToken,{
            maxAge : 1000 * 60 * 60 * 24 ,
            httpOnly : true
        });

        const Userdto = new UserDTO(user);
        return res.status(200).json({user : Userdto , auth : true});

    },
    async logout(req,res,next){
        console.log(req);
        //1. Delete Refresh Token
        const {refreshToken} = req.cookies;

        try{
            await RefreshToken.deleteOne({token : refreshToken});
        }catch(error){
            return next(error);
        }
        //2. Delete Cookies
        res.clearCookie('accessToken');
        res.clearCookie('refreshToken');
        //3. Response
        res.status(200).json({user : null , auth : false});
    },

    async refresh(req,res,next){
        //1. get refresh token from cookies
        //2. verify refresh token
        //3. generate new token 
        //4. update db, return response

        const origionalRefreshToken = req.cookies.refreshToken;

        let id;

        try{

            id = JWTServices.verifyRefreshToken(origionalRefreshToken)._id;

        }catch(e){
            const error = {
                status : 401,
                message : 'Unauthorized'
            }

            return next(error);
        }
        try{

            const match = RefreshToken.findOne({_id : id , token : origionalRefreshToken});

            if(!match){
                const error = {
                    status : 401,
                    message : 'Unauthorized'
                }
            }

        }catch(e){

            return next(e);
        
        }

        try{
            const accessToken = JWTServices.signAccessToken({_id : id}, '30m');
            const refreshToken = JWTServices.signRefreshToken({_id : id}, '60m');
            await RefreshToken.updateOne({_id : id}, {token : refreshToken});

            res.cookie('accessToken' , accessToken,{
                maxAge : 1000 * 60 * 60 * 24,
                httpOnly : true
            })
            res.cookie('refreshToken' , refreshToken,{
                maxAge : 1000 * 60 * 60 * 24,
                httpOnly : true
            })
        }catch(e){
            return next(e);
        }
        const user = await User.findOne({_id : id});
        const userDto = new UserDTO(user);
        return res.status(200).json({user : userDto , auth : true});
    }
}

module.exports = authController;